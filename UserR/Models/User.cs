//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UserR.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    
    public partial class User
    {
       
        public int UserId { get; set; }


        [Required(AllowEmptyStrings = false, ErrorMessage = "Full Name is Required")]//validation

        [Display(Name = "Full_Name:  ")]
        public string FullName { get; set; }

        [Required(AllowEmptyStrings = false, ErrorMessage = "Email is Required")]

        [EmailAddress(ErrorMessage = "Invalid Email Format")]
        [Display(Name = "Email:  ")]
        public string Email { get; set; }

       [Required(ErrorMessage = "Please select the Location")]
       [Display(Name = "Location:  ")]
        public String Location { get; set; }
        
       
        [Required(ErrorMessage = "Please select the Language")]
        [Display(Name = "Language:  ")]
        public string Language { get; set; }
        

        
       [Required(ErrorMessage = "Please select Role")]
        [Display(Name = "Role:  ")]
        public string Role { get; set; }
       
       [RegularExpression("([a-zA-Z]{1,})([@$!%*#?&]{1,})([0-9]{1,})", ErrorMessage = "Password must contain atleast 1 number, 1 letter, and 1 special character.")]
       [Required(AllowEmptyStrings = false, ErrorMessage = "Password is Required")]
        [Display(Name = "Password:  ")]
        [MinLength(8, ErrorMessage = "Password Length is Greater than 8 Digit")]
        public string Password { get; set; }

        [Required(AllowEmptyStrings = false, ErrorMessage = "Userpin is Required")]
        [Display(Name = "Userpin:  ")]
        public int Userpin { get; set; }
    }
}
